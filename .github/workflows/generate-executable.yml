name: Generate executables and post them to release

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  generate-linux-executables:
    name: Build & publish for ${{ matrix.name }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        name: [aarch64-unknown-linux-gnu, armv7-unknown-linux-gnueabihf, i686-unknown-linux-gnu, i686-unknown-linux-musl, x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.name }}

      - name: Get DiscordBotPihole version
        id: bot_version
        run: echo "APP_VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/["]/, "", $2); printf("%s",$2) }' Cargo.toml)" >> $GITHUB_OUTPUT

      - name: Use GitHub cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --locked --target ${{ matrix.name }}

      - name: Upload executable to releases
        uses: Asthowen/UploadReleaseAsset@main
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          release_tag: ${{ steps.bot_version.outputs.APP_VERSION }}
          asset_path: ./target/release/discord_bot_pihole
          asset_name: discord_bot_pihole-${{ steps.bot_version.outputs.APP_VERSION }}-${{ matrix.name }}
          asset_content_type: application/octet-stream

  generate-windows-executables:
    name: Build & publish for ${{ matrix.name }}
    runs-on: windows-latest
    strategy:
      matrix:
        name: [x86_64-pc-windows-gnu, x86_64-pc-windows-msvc, aarch64-pc-windows-msvc]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.name }}

      - name: Get DiscordBotPihole version
        id: bot_version
        run: |
          cargo install cargo-get
          echo "APP_VERSION=$(cargo get version)" >> $GITHUB_OUTPUT
      - name: Use GitHub cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --locked --target ${{ matrix.name }}

      - name: Upload executable to releases
        uses: Asthowen/UploadReleaseAsset@main
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          release_tag: ${{ steps.bot_version.outputs.APP_VERSION }}
          asset_path: ./target/release/discord_bot_pihole.exe
          asset_name: discord_bot_pihole-${{ steps.bot_version.outputs.APP_VERSION }}-${{ matrix.name }}.exe
          asset_content_type: application/octet-stream

  generate-macos-executables:
    name: Build & publish for ${{ matrix.name }}
    runs-on: macos-latest
    strategy:
      matrix:
        name: [x86_64-apple-darwin, aarch64-apple-darwin]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.name }}

      - name: Get DiscordBotPihole version
        id: bot_version
        run: echo "APP_VERSION=$(awk -F ' = ' '$1 ~ /version/ { gsub(/["]/, "", $2); printf("%s",$2) }' Cargo.toml)" >> $GITHUB_OUTPUT

      - name: Use GitHub cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release --locked --target ${{ matrix.name }}

      - name: Upload executable to releases
        uses: Asthowen/UploadReleaseAsset@main
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          release_tag: ${{ steps.bot_version.outputs.APP_VERSION }}
          asset_path: ./target/release/discord_bot_pihole
          asset_name: discord_bot_pihole-${{ steps.bot_version.outputs.APP_VERSION }}-${{ matrix.name }}
          asset_content_type: application/octet-stream